
//Default material may not allow splitting.
global proc string[] getSGsFromShape( string $shape )
{
	string $myShapeNode[] = `listRelatives -children -shapes $shape`;
	string $shadingEngines[];
	if ( `objExists $shape` ){
    	string $dest[] = `listConnections -destination true -source false
      				-plugs false -type "shadingEngine" $myShapeNode[0]`;
    	if ( size( $dest ) ){
      		string $select[] = `ls -sl`;
      		select -r -ne $dest;
      		$shadingEngines = `ls -sl`;
      		select -r $select;
    	}
  	}
  	return $shadingEngines;
}
global proc yjp_SepalateMaterial()
{
	string $selection[] = `ls -sl`;
	$object = $selection[0];
	string $shadingGroups[] = getSGsFromShape($object);
	string $ParentName = ($object + "_Group");
	group -empty -n $ParentName;

	for ($i = 0; $i < size($shadingGroups) ; $i++){
		string $theMaterial[] = `listConnections -d off -s on $shadingGroups[$i]`;
		string $clone = ($object + "_" + $theMaterial[0]);
		duplicate -n $clone  $object;
		parent $clone $ParentName;
		
		string $material[] = `listConnections -d off -s on $shadingGroups[$i]`;
		select $clone; 
		ConvertSelectionToFaces;
		string $tempset = `sets`;
		string $tempgrps[] = `listConnections -type shadingEngine $material[0]`;
		select `sets -int $tempset $tempgrps[0]`;
		InvertSelection;
		delete;
		delete $tempset;
	}
	delete $object;
}
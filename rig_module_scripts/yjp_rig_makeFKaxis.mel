/*	
	proc
		RigCurveBox
		getNodeNamespace
		yjp_rig_snapChains
		yjp_rig_makeMetaNode
		yjp_rig_connectMeta
 */
global proc string[] yjp_rig_makeFKaxis(string $FKjoint[], float $pos[], float $rot[], int $color, int $mirror)
{
	//int $color = 6 ;
	print ("\nyjp_rig_makeFKaxis\n") ;
	int $p,$n;
	global string $ss_RigCharaID ;
	global int $RIGversion = 0;
	global int $yjp_RiGctrlColor[];
	$yjp_RiGctrlColor[1] = $color; 
	string $ID = $ss_RigCharaID;
	string $rootnode ;
	float $Width = 1.0;
	float $Length = 1.0;
	string $metaNode;
	string $VerList[];
	string $sclist[];
	string $messe;

	if($ss_RigCharaID == ""){
		$ID = `getNodeNamespace $FKjoint[0]`;
	}
	string $parentJoint[];
	string $pnode[]= `listRelatives -p -type "joint" $FKjoint[0]`;
	$parentJoint[0] = $pnode[0];
	$messe += $parentJoint[$p]+"\n";
	print("\nparentJoint " +$parentJoint[0] + "\n");
	for ($p=1; $p<size($FKjoint);$p++){
		$parentJoint[$p]=  $FKjoint[$p-1];
		$messe += $parentJoint[$p]+"\n";
	}
	for($p=0;$p<`size $FKjoint`;$p++){
		$metaNode = `yjp_rig_makeMetaNode $FKjoint[$p]` ;	
		yjp_rig_connectMeta $metaNode "source" $FKjoint[$p] "metaParent" ;
		print("\nparentJoint " +$parentJoint[$p] + "\n");
	}

	//バインドジョイントからメッシュオブジェを探し全頂点を取得
	string $bodymesh = $ID+":MODEL";
	if(!`objExists $bodymesh`){
		string $scenemesh[] = `ls -ni -type "mesh"`;
		$bodymesh = $scenemesh[0];
	
		string $obj[] =`ls -ni -dag -type "mesh" $bodymesh ($ID+":NOTOUTPUT")`;
		for($shape in $obj){
			string $p[] =`listRelatives -p $shape`;
				$VerList = stringArrayCatenate ($VerList,(`ls -fl ($p[0] + ".vtx[*]")`));
		}
	}

	for ($n=0; $n<size($FKjoint);$n++){
		string $joint[];
		string $meta = `yjp_rig_getMeta $FKjoint[$n]`;
		if(attributeExists ("source", $meta)){
			$joint = `listConnections -t "joint" ($meta + ".source")`;
		} 

		string $PC[]=`listConnections -t "parentConstraint" ($FKjoint[$n]+".t")`;
		
		if (size($PC[0]) < 1)break;
		
		$joint =`listConnections -t "joint" ($PC[0] +".constraintTranslateX")`;
		
		if (size($joint[0]) < 1)break;
		if($joint[0] == ($ID + ":Root")){
			float $bbpos[] = `xform -q -os -bb $bodymesh`;
			$Width = (abs($bbpos[0]) + abs($bbpos[2]) +abs($bbpos[3]) + abs($bbpos[5]))*0.5 ;
			break;
		}
		if(`attributeExists "worldMatrix" $joint[0]`){
			$sclist = `listConnections -type "skinCluster" ($joint[0] +".worldMatrix")`;
			if (size($sclist[0]) < 1)break;
		}
	}
	if($sclist[0] !=""){
		string $model[];
		string $shpename[] = `skinCluster -q -g $sclist[0]`;
		$model = `listRelatives -p $shpename[0]`;
		if(`nodeType $shpename[0]` == "mesh"){
			$VerList = `filterExpand -sm 31 ($model[0]+".vtx[*]")`;
		}
		else if (`nodeType $shpename[0]` == "nurbsSurface"){
			$VerList = `filterExpand -sm 28 ($model[0]+".cv[*][*]")`;
		}
	}
	
	//各頂点座標
	vector $xyz[];
	for ($n=0 ; $n < size($VerList) ; $n++){
		float $VertexValueFirst[] = `pointPosition -w $VerList[$n]`;
		$xyz[$n] =  <<$VertexValueFirst[0],$VertexValueFirst[1],$VertexValueFirst[2]>>;
	}

	//各ジョイントにFKを仕込む
	string $addFKtxt = "";
	if(!`gmatch $FKjoint[0] "*_FK"`)$addFKtxt = "_FK";

	string $tempNode = ($FKjoint[0] + "_tempNode");
	string $joint_0[];
	string $joint_SDK[];
	string $joint_ctrl[];
	string $parent_ctrl;
	for($p = 0;$p<`size $FKjoint`;$p++){
		$joint_ctrl[$p] = $FKjoint[$p] + $addFKtxt + "_ctrl";
		$joint_SDK[$p] = ($FKjoint[$p] + $addFKtxt + "_SDK");
		$joint_0[$p] = ($FKjoint[$p] + $addFKtxt + "_0");

		if(!`objExists $joint_ctrl[$p]`){
			if(`nodeType $FKjoint[$p]` == "joint" && $FKjoint[$p] != ($ID+":Root")){
				float $distanceList[];
				float $jointposA[],$jointposB[];
				
				setAttr ($FKjoint[$p] + ".segmentScaleCompensate") 0;

				//ジョイントの座標
				$jointposA = `xform -q -a -ws -t $FKjoint[$p]`;
				vector $A = <<$jointposA[0],$jointposA[1],$jointposA[2]>>;

				string $nextJoint[] = `listRelatives -c -type "joint" $FKjoint[$p]`;
				if(size($nextJoint)){
					for ($n=0; $n<(size($nextJoint)); $n++){
						$jointposB = `xform -q -a -ws -t $nextJoint[$n]`;
						vector $B = <<$jointposB[0],$jointposB[1],$jointposB[2]>>;
						float $val = abs(mag($A-$B));
						if($Length <$val)$Length = $val;
					}
				}
				else{
					$Length = $Length/2;
				}
				
				for ($n=0 ; $n < size($xyz) ; $n++){
					//ジョイントと頂点の距離
					float $distance = abs(mag($A-$xyz[$n]));
					//距離の最小値
					$distanceList[$n] = $distance;
				}
				
				$distanceList = `sort $distanceList`;
				//print("\nMinimum vertex distance " + $distanceList[0] + "\n");
				int $p;
				int $range ;
				int $vtxnum = size($distanceList);
				//print($vtxnum + " vtx count\n");

				$range = ceil($vtxnum/30);
				if($range == 0)$range = 8;
				
				for ($p=0; $p<$range;$p++){
					$Width += $distanceList[$p];
				}
				$Width = $Width/$range;
				
				//小さすぎた場合0.5とする
				if($Width < 0.5)$Width = ($Length*0.15);
				if($Width > 3.0)$Width = ($Length*0.25);
			}
			else if($FKjoint[$p] != ($ID+":Root_FK")){
				//print("Size 2.0 when not a joint\n");
				$Width =  2.0;
			}
			select -cl  ;
			group -w -em -n $joint_0[$p];
			group -w -em -n $joint_SDK[$p];

			parent $joint_SDK[$p] $joint_0[$p];
			//箱型カーブコントローラ
			RigCurveBox $joint_ctrl[$p] $Width $Length $yjp_RiGctrlColor[1];
			parent $joint_ctrl[$p] $joint_SDK[$p];
			
			if($mirror){
				select -r ($joint_ctrl[$p] + ".cv[*]");
				rotate -r -os -fo 0 0 180;
			}
			//カーブコントローラ
			$Width = 0.5;
			
			setAttr -keyable false -channelBox false ($joint_ctrl[$p] + ".v");
			print("\nCreating initial value group and SDK group\n");
			select -cl  ;
			string $jointM;
			//$jointM = `substitute "_FK" $FKjoint[$p] "_m"`;
			
			if($p == 0){
				setAttr ($joint_0[$p] + ".t") $pos[0] $pos[1] $pos[2];
				setAttr ($joint_0[$p] + ".r") $rot[0] $rot[1] $rot[2];
				$tempNode = `createNode "transform" -n $tempNode`;
				setAttr ($tempNode + ".t") 0 20 0;
				parent -r $tempNode $FKjoint[0];
			}
			$jointM = $FKjoint[$p] +"_m";
			if(`objExists $jointM`){
				matchTransform $joint_0[$p] $jointM;
			}
			$metaNode = `yjp_rig_getMeta $FKjoint[$p]` ;
			yjp_rig_connectMeta $metaNode "FKctrl" $joint_ctrl[$p] "metaParent";
			yjp_rig_connectMeta $metaNode "FKsdk" $joint_SDK[$p] "metaParent";
			yjp_rig_connectMeta $metaNode "FKoffset" $joint_0[$p] "metaParent";
		}
		if($p > 0){
			//FKのペアレント
			print($joint_0[$p] +" "+ $parent_ctrl + "\n");
		
			parent $joint_0[$p] $parent_ctrl;
			
			string $cildMeta = `yjp_rig_getMeta $FKjoint[$p]`;
			string $parentMetaNode = `yjp_rig_getMeta $parent_ctrl`;
			yjp_rig_connectMeta $parentMetaNode "metaChild" $cildMeta "metaParent";
		}
		$parent_ctrl = $joint_ctrl[$p]; 
	}
	$messe = $joint_0[$p] + " " + $parent_ctrl;
	string $Chain[] = $FKjoint;
	yjp_rig_snapChains $Chain $joint_0 $tempNode $mirror;
	delete $tempNode;

	for($p = 0;$p<`size$FKjoint`;$p++){
		print("\n"+($joint_ctrl[$p]+"_PC") +" "+$joint_ctrl[$p] +" "+$FKjoint[$p] + "\n");
		string $pconst[] = `parentConstraint -mo -n ($joint_ctrl[$p]+"_PC") $joint_ctrl[$p] $FKjoint[$p]`;
		string $sconst[] = `scaleConstraint -mo -n ($joint_ctrl[$p]+"_SC") $joint_ctrl[$p] $FKjoint[$p]`;
		yjp_rig_connectMeta $metaNode "Utility" $pconst[0] "metaParent";
		yjp_rig_connectMeta $metaNode "Utility" $sconst[0] "metaParent";	
	}
	print ("yjp_rig_makeFKaxis END> " + $joint_ctrl[0] + "\n");
	return $joint_ctrl;
}
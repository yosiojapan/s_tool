/*	
	proc
		yjp_rig_IKFKSwichesUI
		SelectJointArray
		yjp_DuplicateIKJoint
		metaNoIk_Array
		yjp_ArrayParent
		distanceBetween
		RigCurveBox
		resetAttrs
		//RigCtrlCharacterSet
		lockAndHideAttributes
		yjp_rig_makePVLocator
		createTemplateLine
		yjp_rig_makeFK
		string $charaName charaset
*/

global proc yjp_rig_IKFKSetUp(string $yosSJointName , string $yosEJointName , string $PVlocator , int $LegType)
{
	print ("yjp_rig_IKFKSetUp " + $yosSJointName + " "+ $yosEJointName + " "+ $PVlocator + " "+ $LegType + ";"+ "\n");
	global int $yjp_RiGctrlColor[];
	if(!`objExists $yosSJointName`||!`objExists $yosEJointName`){
		warning("No Node");
		return ;
	}
	source yjp_rig_GroundCTRL.mel;
	source yjp_rig_IKFKSwichesUI.mel;

	int $n,$nn;
	global string $ss_RigCharaID ;
	global string $sRig_RootCtrl;
	string $ID = $ss_RigCharaID;
	global int $RIGversion = 0;
	string $setName;
	string $parentCTRL ;
	string $IKFKparentJoint = ($ID + ":RIG_DO_NOT_TOUCH");
	$setName = $ss_RigCharaID + "_ctrl";

	//メタルート取得
	string $metaroot = `yjp_rig_getMetaRoot $ss_RigCharaID`;
	if(size($metaroot) == 0){
		yjp_rig_makeMetaRootUI;
		$metaroot = `yjp_rig_getMetaRoot $ss_RigCharaID`;
	}
	
	$parentCTRL = (`yjp_rig_ParentRoot $yosSJointName`) + "_FK_ctrl";
	$sRig_RootCtrl = $parentCTRL;

	print($sRig_RootCtrl + "\n");
	if(`objExists $sRig_RootCtrl`){
		$IKFKparentJoint = $sRig_RootCtrl;
	}	
	else{
		$rootmeta = `yjp_rig_getMeta $sRig_RootCtrl`;
		string $sRig_RootCtrlctrl[] = `listConnections -type "joint" ($rootmeta +".Utility")`;
		print($sRig_RootCtrlctrl[0] + "\n");
		if(`gmatch $sRig_RootCtrlctrl[0] "*_FK"`){
			$IKFKparentJoint = $parentCTRL;
		}
	}

	//グランドコントロール
	yjp_rig_GroundCTRL $yosSJointName $ss_RigCharaID;

	string $RootJointName = `nameRoot $yosSJointName`;
	string $RootJointShortName = $ID + ":" + $RootJointName;
	
	string $EndJointName = `nameRoot $yosEJointName`;
	string $EndJointShortName = $ID + ":" + $EndJointName;
	string $banckLoc[] = `spaceLocator `;
	matchTransform $banckLoc[0] $yosEJointName;
	
	string $yosAllJoint[];
	$yosAllJoint = `ls -sl`;
	print("bindJoint >"+$yosAllJoint[0] + "\n");
	print("startjoint >"+$yosSJointName + "\n");
	if(!stringArrayContains($yosSJointName, $yosAllJoint)){
		//２つのジョイントの間にあるジョイントすべてを配列に
		$yosAllJoint = `SelectJointArray $yosSJointName $yosEJointName`;
	}
	float $endpos[];
	$endpos = `xform -q -ws -t $yosEJointName`;
	
	//斜めが初期位置の腕は実行しない
	vector $js = `xform -q -ws -t $yosSJointName`;
	vector $je = `xform -q -ws -t $yosEJointName`;
	vector $jn = unit($je-$js);
	vector $jna = abs($jn);

	int $JointNum = `size$yosAllJoint`-1;
	string $AllJointShortName[8];
	string $metaNode[];
	
	float $aimAxis[] = {1,0,0} ;
	float $upAxis[] = {0,1,0} ;
	float $upDir[] = {0,1,0} ;
	float $aimJO[] = {1,0,0} ;
	float $upJO[] = {0,1,0} ;
	float $upDirJO[] = {0,0,1} ;
	string $oj = "xyz";
	string $wo = "zup";
	string $j[];
	int $LegOrArm = 0;

	//ikモジュールメタノード作成
	string $IKmetaNode = `yjp_rig_makeMetaNode ($yosAllJoint[0] + "_IK")` ;
	setAttr -type "string" ($IKmetaNode + ".MetaType") "IKmodule";
	
	//pvモジュールメタノード作成
	string $PVmetaNode = `yjp_rig_makeMetaNode ($RootJointShortName + "_PV")` ;
	setAttr -type "string" ($PVmetaNode + ".MetaType") "IKpv";
	
	//メタとメタのコネクト
	yjp_rig_connectMeta $metaroot "metaChild" $IKmetaNode "metaRootParent";
	int $p =0;
	for ($n=0;$n<`size$yosAllJoint`;$n++){
		if(!`attributeExists "metaNoIk" $yosAllJoint[$n]`){
			$AllJointShortName[$p] = `nameRoot $yosAllJoint[$n]`;
			$p++;
			//メタノード作成
			$metaNode[$n] = `yjp_rig_makeMetaNode $yosAllJoint[$n]` ;
			print("makeMeta " +$metaNode[$n]+ "\n");
			
			yjp_rig_connectMeta $IKmetaNode "metaChild" $metaNode[$n] "metaParent";
			yjp_rig_connectMeta $metaNode[$n] "source" $yosAllJoint[$n] "metaParent";
			setAttr -type "string" ($metaNode[$n] + ".MetaType") "IKmid";
			yjp_rig_connectMeta $IKmetaNode "metaikChild" $metaNode[$n] "metaikParent";
			//print ("_______AllJointShortName " + $AllJointShortName[$n] +"\n");
		}
	}
	
	//IKFK切り替えUI
	yjp_rig_IKFKSwichesUI $yosSJointName;
	setAttr ($yosSJointName + "_IKFK.v") 0;
	yjp_rig_connectMeta $IKmetaNode "FKsw" ($RootJointShortName + "_swiches_rev") "metaParent";
	yjp_rig_connectMeta $IKmetaNode "IKsw" ($RootJointShortName + "_swiches_if") "metaParent";
	
	//IKジョイントとFKジョイントを別名で複製
	float $Endrval[],$Endjoval[];
	string $All_IK_JointName[] = `yjp_DuplicateIKJoint $ID "_IK" $yosAllJoint $PVlocator`;

	$All_IK_JointName = `yjp_ArrayParent $All_IK_JointName`;
	select -cl  ;

	setAttr ($All_IK_JointName[0] + ".segmentScaleCompensate") 0;
	parent $All_IK_JointName[0] $IKFKparentJoint;

	string $All_FK_JointName[] = `yjp_DuplicateIKJoint $ID "_FK" $yosAllJoint $PVlocator`;
	$All_FK_JointName = `yjp_ArrayParent $All_FK_JointName`;
	select -cl  ;

	parent $All_FK_JointName[0] $IKFKparentJoint;
	setAttr ($All_FK_JointName[0] + ".segmentScaleCompensate") 0;

	//matchTransform $All_FK_JointName[size($All_FK_JointName)-1] $banckLoc[0];

	//$Endrval = `getAttr ($All_FK_JointName[size($All_FK_JointName)-1]+".r")`;
	//setAttr ($All_FK_JointName[size($All_FK_JointName)-1]+".r") 0 0 0;
	//setAttr ($All_FK_JointName[size($All_FK_JointName)-1]+".jointOrient") $Endrval[0] $Endrval[1] $Endrval[2];
	////

	//使用しないジョイントの削除
	//string $Dup_IK_JointName[] = `metaNoIk_Array $All_IK_JointName`;
	//string $Dup_FK_JointName[] = `metaNoIk_Array $All_FK_JointName`;

	//配列の順でペアレント
	//yjp_ArrayParent $Dup_IK_JointName;
	//yjp_ArrayParent $Dup_FK_JointName;

	editDisplayLayerMembers ($ss_RigCharaID+"_RIG_DO_NOT_TOUCH_Layer") $All_IK_JointName[0];
	for ($n=0; $n<(size($All_IK_JointName)); $n++){
		setAttr -l 1 ($All_IK_JointName[$n] + ".preferredAngle");
		setAttr -l 1 ($All_IK_JointName[$n] + ".jointOrient");
	}
	setAttr ($All_FK_JointName[0] + ".v") 0 ;

	string $All_iIK_JointName[],$Dup_iIK_JointName[],$All_aIK_JointName[],$IK_JointList[];
	$IK_JointList = $All_IK_JointName;
	string $IKvector = $yosAllJoint[0] + "_IKvector";
	string $IKcenter = $yosAllJoint[0] + "_IKcenter";
	string $IKvectorSDK = $yosAllJoint[0] + "_IKvectorSDK";
	string $IKcenterSDK = $yosAllJoint[0] + "_IKcenterSDK";
	string $softLoc = $yosAllJoint[0] + "_softLoc";
	if($LegType == 1 ){
		//SpringSolver Joint
		$All_iIK_JointName = `yjp_DuplicateIKJoint $ID "_iIK" $yosAllJoint $PVlocator`;
		$All_iIK_JointName = `yjp_ArrayParent $All_iIK_JointName`;

		//Make the parent of an iIKjoint the same as an IKjoint
		parent $All_iIK_JointName[0] $IKFKparentJoint;

		for($n=0;$n<`size$All_iIK_JointName`;$n++){
			if($n == 0 )setAttr ($All_iIK_JointName[$n] + ".visibility") 0;
			setAttr ($All_iIK_JointName[$n] + ".segmentScaleCompensate") 1;
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	float $rootLen,$CenterLen,$endLen,$totalLen,$AUXLen,$BaseTX,$shiftX,$shiftY;

	//IKコントロール
	float $Length = 0.5;
	float $Width = 0.5;
	string $HandleIKName[],$Handle_iIKName[],$hockHandleIKName[];

	if($LegType == 1 ){
		//iIKjoint　大腿から踵IKの末端スプリングソルバikSpringSolver
		ikSpringSolver;
		$Handle_iIKName = `ikHandle -n ($All_iIK_JointName[0]+"Handle") -sol ikRPsolver -sj $All_iIK_JointName[0] -ee $All_iIK_JointName[size($All_iIK_JointName)-1]`;

		//IKjoint　大腿からくるぶしまでロールプレーンソルバikRPsolver
		$HandleIKName = `ikHandle -n ($All_IK_JointName[1]+"ankleHandle") -sol ikRPsolver -sj $All_IK_JointName[0] -ee $All_IK_JointName[2]`;
		
		//IKjoint　くるぶしから踵までシングルソルバ
		$hockHandleIKName = `ikHandle -n ($All_IK_JointName[1]+"hockHandle") -sol ikSCsolver -sj $All_IK_JointName[2] -ee $All_IK_JointName[3]`;
		
		//iIKjoint踵の子にする
		parent $hockHandleIKName[0] $All_iIK_JointName[3];
		parent $Handle_iIKName[0] $IKFKparentJoint;

		setAttr ($HandleIKName[0]+".visibility") 0;
		setAttr ($Handle_iIKName[0]+".visibility") 0;
		setAttr ($hockHandleIKName[0]+".visibility") 0;
		//parent $Handle_iIKName $IKFKparentJoint;
		yjp_rig_connectMeta $IKmetaNode "Handle" $Handle_iIKName[0] "metaParent";
		yjp_rig_connectMeta $IKmetaNode "Handle" $HandleIKName[0] "metaParent";
		yjp_rig_connectMeta $IKmetaNode "Handle" $hockHandleIKName[0] "metaParent";
	}
	else {
		$HandleIKName = `ikHandle -n ($All_IK_JointName[0]+"Handle") -sol ikRPsolver -sj $All_IK_JointName[0] -ee $All_IK_JointName[size($All_IK_JointName)-1]`;
		setAttr ($HandleIKName[0]+".visibility") 0;

		//parent $HandleIKName[0] ($ID + ":RIG_DO_NOT_TOUCH") ;
		parent $HandleIKName[0] $parentCTRL ;
		yjp_rig_connectMeta $PVmetaNode "Handle" $HandleIKName[0] "metaParent";
	}
	//setAttr ($HandleIKName[0]+".visibility") 0;

	string $NextJoint[];
	string $GuideRoot = $RootJointShortName + "_IK";
	$NextJoint = `pickWalk -d down $GuideRoot`;
	if ($GuideRoot != $NextJoint[0]){
		$Width = (`distanceBetween $GuideRoot $NextJoint[0]`/ 8);
	}
	print ("__joint Length " + $Length +"\n");

	//コントローラ
	string $BoxRootJoinIK_Ctrl = ($RootJointShortName + "_IK_ctrl");
	
	//Root箱型カーブコントローラ
	RigCurveBoxCenter $BoxRootJoinIK_Ctrl $Width $Length $yjp_RiGctrlColor[2];

	//子の方向を調べてコントローラーを回転
	group -w -em -n ($RootJointShortName + "_IK_SDK");
	parent $BoxRootJoinIK_Ctrl ($RootJointShortName + "_IK_SDK");
	group -w -em -n ($RootJointShortName + "_IK_0");
	parent ($RootJointShortName + "_IK_SDK") ($RootJointShortName + "_IK_0");
	parent ($RootJointShortName + "_IK_0") ($RootJointShortName + "_IK");
	resetAttrs ($RootJointShortName + "_IK_0");
	parent -w ($RootJointShortName + "_IK_0");
	
	yjp_rig_connectMeta $metaNode[0] "IKctrl" $BoxRootJoinIK_Ctrl "metaParent";
	yjp_rig_connectMeta $metaNode[0] "IKsdk" ($RootJointShortName + "_IK_SDK") "metaParent";
	yjp_rig_connectMeta $metaNode[0] "IKoffset" ($RootJointShortName + "_IK_0") "metaParent";
	setAttr -type "string" ( $metaNode[0] + ".MetaType") "IKroot";
	yjp_rig_connectMeta $IKmetaNode "IKroot" $metaNode[0] "metaParent";
	
	//キャラクターセット
	sets -e -in $setName $BoxRootJoinIK_Ctrl;
	
	string $IKPc[],$aIKPc;
	$IKPc[0] = $GuideRoot + "_PC";
	$aIKPc = $GuideRoot + "_aPC";
	$IKPc = `pointConstraint -n $IKPc[0] $BoxRootJoinIK_Ctrl $GuideRoot`;

	if($LegType == 1 ){
		$GuideRoot = $RootJointShortName + "_iIK";
		$IKPc[0] = $GuideRoot + "_PC";
		$IKPc = `parentConstraint -n $IKPc[0] $BoxRootJoinIK_Ctrl $GuideRoot`;
	}
	yjp_rig_connectMeta $metaNode[0] "Utility" $IKPc[0] "metaParent";
	
	scaleConstraint -n($GuideRoot+"_SC") $BoxRootJoinIK_Ctrl $GuideRoot;
	
	connectAttr ($RootJointShortName + "_swiches_rev.outputX") ($RootJointShortName + "_IK_ctrl.visibility");
	$NextJoint = `pickWalk -d down $All_IK_JointName[0]`;
	
	if ($All_IK_JointName[0] != $NextJoint[0]){
		$Length = `distanceBetween $All_IK_JointName[0] $NextJoint[0]`;
		$Width = $Length / 3;
		if($Length < 00.1){
			$Length = 0.1;
			$Width = 0.1;
		}
		//float $pos = `getAttr ($NextJoint[0]+".translateX")`;
		float $pos[] = `xform -ws -q -t $NextJoint[0]`;
		if($pos[0]<-0.01){
			$Length = $Length * -1 ;
		}
	}
	
	string $EndJointMoveIK_Ctrl = $EndJointShortName + "_IK_ctrl";
	string $EndJointRotIK_Ctrl = $EndJointShortName + "_IKR_ctrl";
	print("End Spherical Curve Controller \n");
	//End球型カーブコントローラ
	RigCurveSphere $EndJointMoveIK_Ctrl ($Length*0.5) ($Length*0.5) $yjp_RiGctrlColor[3];
	
	//End箱型カーブコントローラ
	RigCurveBox $EndJointRotIK_Ctrl $Width $Length $yjp_RiGctrlColor[4];
	
	//子の方向を調べてコントローラーを回転
	//yjp_RotateTowardChild $yosEJointName $EndJointRotIK_Ctrl;
	
	group -w -em -n ($EndJointShortName + "_IK_SDK") ;
	parent ($EndJointShortName + "_IK_ctrl") ($EndJointShortName + "_IK_SDK");
	group -w -em -n ($EndJointShortName + "_IK_0");
	parent ($EndJointShortName + "_IK_SDK") ($EndJointShortName + "_IK_0");
	
	//matchTransform ($EndJointShortName + "_IK_0") $yosEJointName;
	
	//parent ($EndJointShortName + "_IK_0") ($EndJointShortName + "_IK");
	//resetAttrs ($EndJointShortName + "_IK_0");
	//parent -w ($EndJointShortName + "_IK_0");
	
	//refresh;confirmDialog -m "End球型カーブコントローラ";
	print("IK_0\n");
	string $EndParentIKjoint[] = `listRelatives -p ($EndJointShortName + "_IK")`;
	string $IK_jointNode = $EndJointMoveIK_Ctrl;
	print("mirror\n");
	if($RIGversion >0){
		float $wspos[] = `xform -ws -q -t $yosEJointName`;
		if($wspos[0]<0 && floatEq($wspos[0], 0.0)==0){
			print($wspos[0] + " "+$yosEJointName + " pos\n");
			string $jointlist[] = `ls -type "joint" -rn`;
			print("D\n");
			
			for ($n=0; $n<size($jointlist); $n++){
				float $Rjpos[] = `xform -ws -q -t $jointlist[$n]`;
				if(floatEq(($wspos[0]*-0.01), ($Rjpos[0]*0.01))==1 && floatEq(($wspos[1]*0.01), ($Rjpos[1]*0.01))==1 && floatEq(($wspos[2]*0.01), ($Rjpos[2]*0.01))==1 ){
					print($jointlist[$n]+" Mirror Joint\n");
					
					joint -n "tempjoint_right";
					matchTransform "tempjoint_right" $jointlist[$n];
					string $mirNode[] = `mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "_right" "_left" "tempjoint_right"`;
					$IK_jointNode = $mirNode[0];
					break;
				}
			}
		}
	}

	print("mirror\n");refresh;
	group -w -em -n ($EndJointShortName + "_IKR_SDK") ;
	parent $EndJointRotIK_Ctrl ($EndJointShortName + "_IKR_SDK");
	group -w -em -n ($EndJointShortName + "_IKR_0");
	parent ($EndJointShortName + "_IKR_SDK") ($EndJointShortName + "_IKR_0");
	parent ($EndJointShortName + "_IKR_0") $EndJointMoveIK_Ctrl;
	resetAttrs ($EndJointShortName + "_IKR_0");
	matchTransform -rot ($EndJointShortName + "_IKR_0") $All_IK_JointName[2];
	print("IKR_0\n");
	//
	if(`objExists "tempjoint_right"`)delete "tempjoint_right";
	if(`objExists "tempjoint_left"`)delete "tempjoint_left";
	if($LegType == 1 ){
		//$HandleIKName[0]に親ノードを作る
		string $anklectrl = ($All_IK_JointName[1]+"ankle_ctrl");
		RigCurveBox $anklectrl $Width $Length $yjp_RiGctrlColor[4];
		lockAndHideAttributes $anklectrl {"t","s"};

		group -w -em -n ($All_IK_JointName[1]+"ankle_0");
		matchTransform ($All_IK_JointName[1]+"ankle_0") $All_iIK_JointName[3];

		//iIKjointくるぶしの子にする
		parentConstraint -mo $All_iIK_JointName[2] ($All_IK_JointName[1]+"ankle_0");
		//yjp_matrixConstraint ($All_IK_JointName[1]+"ankle_0") $All_iIK_JointName[2] 1; 
		parent -r $anklectrl ($All_IK_JointName[1]+"ankle_0");
		parent $HandleIKName[0] $anklectrl;	

		//RigCtrlCharacterSet $anklectrl $charaName;
		sets -e -in $setName $anklectrl;
		yjp_rig_connectMeta $metaNode[$JointNum] "iIKctrl" $anklectrl "metaParent";

	}
	//orientConstraint $EndParentIKjoint[0] ($EndJointShortName + "_IKR_0");
	$JointNum = size($metaNode)-1;
	yjp_rig_connectMeta $metaNode[$JointNum] "IKctrl" $EndJointMoveIK_Ctrl "metaParent";
	yjp_rig_connectMeta $metaNode[$JointNum] "IKsdk" ($EndJointShortName + "_IK_SDK") "metaParent";
	yjp_rig_connectMeta $metaNode[$JointNum] "IKoffset" ($EndJointShortName + "_IK_0") "metaParent";
	yjp_rig_connectMeta $metaNode[$JointNum] "IKRctrl" $EndJointRotIK_Ctrl "metaParent";
	yjp_rig_connectMeta $metaNode[$JointNum] "IKRsdk" ($EndJointShortName + "_IKR_SDK") "metaParent";
	yjp_rig_connectMeta $metaNode[$JointNum] "IKRoffset" ($EndJointShortName + "_IKR_0") "metaParent";
	
	setAttr -type "string" ( $metaNode[$JointNum] + ".MetaType") "IKend";
	addAttr -longName "length" -at double -dv 0 $metaNode[$JointNum];
	vector $obj1Pos = `xform -q -ws -t $yosSJointName`;
	vector $obj2Pos = `xform -q -ws -t $yosEJointName`;
	float $val = mag($obj1Pos - $obj2Pos);
	setAttr ( $metaNode[$JointNum] + ".length") $val;
	//yjp_rig_connectMeta $IKmetaNode "IKend" $metaNode[$JointNum] "metaParent";
	//yjp_rig_connectMeta $IKmetaNode "metaikChild" $metaNode[$JointNum] "metaikParent";

	string $lockat[] = {"t"};
	lockAndHideAttributes $EndJointRotIK_Ctrl $lockat;
	setAttr -keyable false -channelBox false ($EndJointRotIK_Ctrl + ".v");
	if(`objExists ($EndJointShortName + "_aIK")`){
		connectAttr -f ($EndJointRotIK_Ctrl+".scale") ($EndJointShortName + "_aIK.scale");
	}
	else{
		connectAttr -f ($EndJointRotIK_Ctrl+".scale") ($EndJointShortName + "_IK.scale");
	}
	
	$lockat = {"r","s"};
	lockAndHideAttributes $EndJointMoveIK_Ctrl $lockat;
	setAttr -keyable false -channelBox false ($EndJointMoveIK_Ctrl + ".v");
	
	//キャラクターセット
	//RigCtrlCharacterSet $EndJointMoveIK_Ctrl $charaName;
	//RigCtrlCharacterSet $EndJointRotIK_Ctrl $charaName;
	sets -e -in $setName $EndJointMoveIK_Ctrl;
	sets -e -in $setName $EndJointRotIK_Ctrl;

	if($LegType == 1 ){
		$IKPc[0] = $Handle_iIKName[0] + "_PoC";
		$IKPc = `pointConstraint -n $IKPc[0] $EndJointMoveIK_Ctrl $Handle_iIKName[0]`;
		yjp_rig_connectMeta $metaNode[$JointNum] "Utility" $IKPc[0] "metaParent";
	}
	else{
		$IKPc[0] = $GuideRoot + "_PoC";
		$IKPc = `pointConstraint -n $IKPc[0] $EndJointMoveIK_Ctrl $HandleIKName[0]`;
		yjp_rig_connectMeta $metaNode[$JointNum] "Utility" $IKPc[0] "metaParent";
	}
	$IKPc[0] = $GuideRoot + "_OC";

	$IKPc = `orientConstraint -mo -n $IKPc[0] $EndJointRotIK_Ctrl ($EndJointShortName + "_IK")`;
	
	yjp_rig_connectMeta $metaNode[$JointNum] "Utility" $IKPc[0] "metaParent";

	refresh;
	//lockAndHideAttributes ( $EndJointMoveIK_Ctrl , {"sx", "sy", "sz"});
	
	//addAttr -ln "ikTwist" -k true -at double ($EndJointShortName + "IK_ctrl");
    //connectAttr -f ($EndJointShortName + "IK_ctrl.ikTwist") ($HandleIKName[0] + ".twist");
	if($LegType == 100 )
	{
		addAttr -ln "ReverseKneeX" -k true -at double ($EndJointShortName + "_IK_ctrl");
		connectAttr -f ($EndJointShortName + "_IK_ctrl.ReverseKneeX") ($RootJointShortName + "_IK" + ".rotateX");
		addAttr -ln "ReverseKneeY" -k true -at double ($EndJointShortName + "_IK_ctrl");
		connectAttr -f ($EndJointShortName + "_IK_ctrl.ReverseKneeY") ($RootJointShortName + "_IK" + ".rotateY");
		addAttr -ln "ReverseKneeZ" -k true -at double ($EndJointShortName + "_IK_ctrl");
		connectAttr -f ($EndJointShortName + "_IK_ctrl.ReverseKneeZ") ($RootJointShortName + "_IK" + ".rotateZ");
	}
	connectAttr ($RootJointShortName + "_swiches_rev.outputX") ($EndJointShortName + "_IK_ctrl.visibility");
	//ポールベクターの設定
	float $RA;
	//string $PVlocatorShortName = `nameRoot $PVlocator`;
	//string $newplpos[] = `duplicate -n ($yosSJointName + "_pv") $PVlocator`;
	string $newplpos[] = `spaceLocator -p 0 0 0 -n ($yosSJointName + "_pv")`;
	matchTransform $newplpos[0] $PVlocator;
	setAttr ($newplpos[0] + ".visibility") 0;
	setAttr ($PVlocator + ".visibility") 0;
	xform -cp $newplpos[0];
	float $pv[] = `xform -q -ws -rp $newplpos[0]`;
	//delete $newplpos[0] ;
	//parent $newplpos[0] ($ID + ":RIG_DO_NOT_TOUCH");
	parent $newplpos[0] $sRig_RootCtrl;
	parentConstraint -mo $All_FK_JointName[0] $newplpos[0];
	
	//箱型カーブコントローラ
	
	string $CtrlNamePV = $RootJointShortName + "PV";
	string $BoxPv_Ctrl = $CtrlNamePV + "_IK_ctrl";
	$Length = (`distanceBetween $yosSJointName $yosEJointName`/20);
	$Width = $Length;
	RigCurveBox $BoxPv_Ctrl $Width $Length $yjp_RiGctrlColor[5];
	select -r $BoxPv_Ctrl;
	addAttr -longName pvpos -attributeType double3 ;
    addAttr -longName X -attributeType double -parent pvpos;
    addAttr -longName Y -attributeType double -parent pvpos;
    addAttr -longName Z -attributeType double -parent pvpos;
	group -w -em -n ($CtrlNamePV + "_IK_0");
	group -w -em -n ($CtrlNamePV + "_IK_SDK");
	parent ($CtrlNamePV + "_IK_SDK") ($CtrlNamePV + "_IK_0");
	move $pv[0] $pv[1] $pv[2] ($CtrlNamePV + "_IK_0");
	parent $BoxPv_Ctrl ($CtrlNamePV + "_IK_SDK");
	resetAttrs($CtrlNamePV + "_IK_SDK");
	resetAttrs $BoxPv_Ctrl;
	$lockat = {"r","s"};
	
	lockAndHideAttributes $BoxPv_Ctrl $lockat;
	setAttr -keyable false -channelBox false ($BoxPv_Ctrl + ".v");
	//モジュールにコネクト
	yjp_rig_connectMeta $PVmetaNode "IKctrl" $BoxPv_Ctrl "metaParent";
	yjp_rig_connectMeta $PVmetaNode "IKsdk" ($CtrlNamePV + "_IK_SDK") "metaParent";
	yjp_rig_connectMeta $PVmetaNode "IKoffset" ($CtrlNamePV + "_IK_0") "metaParent";
	yjp_rig_connectMeta $IKmetaNode "metaikChild" $PVmetaNode "metaikParent";
	
	parent ($RootJointShortName + "_IK_0") ($EndJointShortName + "_IK_0") ($CtrlNamePV + "_IK_0") $sRig_RootCtrl;
	string $midJointIK_Ctrl = $yosAllJoint[1] + "_IK_ctrl";
	
	string $IKcenterSDKpc[];

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//IKジョイントと元ジョイントをペアレントコンストレイン、FKジョイントと元ジョイントをペアレントコンストレイン
	$p =0;

	for($nn=0;$nn<`size $yosAllJoint`;$nn++){
		print("yosAllJoint "+$yosAllJoint[$p] + "\n");

		if(!`attributeExists "metaNoIk" $yosAllJoint[$nn]`){
			print("IK_JointList "+$IK_JointList[$p] + "\n");
			yjp_rig_connectMeta $metaNode[$nn] "Utility" $IK_JointList[$p] "metaParent";
			print("All_FK_JointName "+$All_FK_JointName[$p] + "\n");
			yjp_rig_connectMeta $metaNode[$nn] "Utility" $All_FK_JointName[$p] "metaParent";
			
			string $yosParConIK[],$ParConIKFKname[];
			$ParConIKFKname[0] = $IK_JointList[$p] +"FK_PaC";
			select -cl  ;
			print("IK_JointList " + $IK_JointList[$p] + "\n");
			print("All_FK_JointName " + $All_FK_JointName[$p] + "\n");
			print("yosAllJoint " + $yosAllJoint[$nn] + "\n");

			if($yosAllJoint[$nn]==$yosEJointName ){
				
				$yosParConIK = `parentConstraint -n $ParConIKFKname[0] -mo -w 1  $IK_JointList[$p] $All_FK_JointName[$p] $yosAllJoint[$nn]`;
			}
			else{
				
				$yosParConIK = `parentConstraint -n $ParConIKFKname[0] -mo -w 1  $IK_JointList[$p] $All_FK_JointName[$p] $yosAllJoint[$nn]`;
			}
			
			//refresh;confirmDialog -m"parentConstraint";
			string $IKWattr[] = `listAttr -st "*IKW*" $yosParConIK`;
			string $FKWattr[] = `listAttr -st "*FKW*" $yosParConIK`;
			string $yosParConFK[],$ParConFKname[];
			//$ParConFKname[0] = $All_FK_JointName[$p] +"_PaC";
			//print($yosParConFK[0] + "\n");
			//$yosParConFK = `parentConstraint -w 0 -n $ParConIKFKname[0]  $yosAllJoint[$nn]`;
			print("AllJointShortName "+$AllJointShortName[$p] + "\n");
			connectAttr ($RootJointShortName + "_swiches_rev.outputX") ($yosParConIK[0] + "." + $IKWattr[0]);
			connectAttr ($RootJointShortName + "_swiches_if.outColorR") ($yosParConIK[0] + "." + $FKWattr[0]);
			//refresh;confirmDialog -m"connectAttr";
			yjp_rig_connectMeta $metaNode[$nn] "Utility" $yosParConIK[0] "metaParent";

			//yjp_rig_connectMeta $metaNode[$nn] "Utility" $yosParConFK[0] "metaParent";
			if($nn == size( $yosAllJoint)-1){
				string $yosScConIK[];
				$yosScConIKFK[0] = $IK_JointList[$p] +"_SC";
				$yosScConIK = `scaleConstraint -w 1 -n $yosScConIKFK[0] $IK_JointList[$p] $All_FK_JointName[$p] $yosAllJoint[$nn]`;
				string $yosScConFK[];
				setAttr ($yosScConIK[0]+".nodeState") 2;
				$IKWattr = `listAttr -st "*IKW*" $yosScConIK`;
				$FKWattr = `listAttr -st "*FKW*" $yosScConIK`;
				connectAttr ($RootJointShortName + "_swiches_rev.outputX") ($yosScConIK[0] + "." + $IKWattr[0]);
				connectAttr ($RootJointShortName + "_swiches_if.outColorR") ($yosScConIK[0] + "." + $FKWattr[0]);
				yjp_rig_connectMeta $metaNode[$nn] "Utility" $yosScConIK[0] "metaParent";
			}			
			if($LegType == 1 ){
				setAttr ($yosAllJoint[$nn] + ".segmentScaleCompensate") 1;
				setAttr ($IK_JointList[$p] + ".segmentScaleCompensate") 0;					
			}
			else{
				setAttr ($yosAllJoint[$nn] + ".segmentScaleCompensate") 0;
				setAttr ($IK_JointList[$p] + ".segmentScaleCompensate") 1;				
			}
			//refresh;confirmDialog -m"segmentScaleCompensate";
			//setAttr ($All_FK_JointName[$p] + ".drawStyle") 2;
			$p++;
		}
		//setAttr ($EndJointMoveIK_Ctrl + ".length_joint_1") $rootLen;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//キャラクターセット
	sets -e -in $setName $BoxPv_Ctrl;
	
	if($LegType == 1){
		poleVectorConstraint -n ($HandleIKName[0]+"_PVc") $BoxPv_Ctrl $HandleIKName[0];
		poleVectorConstraint -n ($Handle_iIKName[0]+"_PVc") $BoxPv_Ctrl $Handle_iIKName[0];
		parent ($All_IK_JointName[1]+"ankle_0") $sRig_RootCtrl;
		//ピボットを踵に変更
		//setAttr ($HandleIKName[0] + ".twist") 90;
		//setAttr ($Handle_iIKName[0] + ".twist") 0;
	}
	else if($LegType == 0){
		poleVectorConstraint -n ($HandleIKName[0]+"_PVc") $BoxPv_Ctrl $HandleIKName[0];
	}
	if($PVlocator == "noflip"){
		parent ($CtrlNamePV + "_IK_0") ($RootJointShortName + "_IK_0");
		float $v = `getAttr ($yosAllJoint[1] +".preferredAngleX")`;
		$v += `getAttr ($yosAllJoint[1] +".preferredAngleY")`;
		$v += `getAttr ($yosAllJoint[1] +".preferredAngleZ")`;
		//20 -45 90 
		//-20 -45 -90 
		//20 -45 -90 
		//-20 45 90
		$RA = 90;
		if($v < 0)$RA=-90;
		setAttr ($HandleIKName[0] + ".twist") $RA;
	}
	//print ("_______ポールベクター" +"\n");
	connectAttr ($RootJointShortName + "_swiches_rev.outputX") ($CtrlNamePV + "_IK_ctrl.visibility");
	//createTemplateLine.mel
	if($PVlocator != "noflip"){
	//ポールベクターのターゲットラインを作る
		string $TemplateLine =`createTemplateLine $All_IK_JointName[1] $BoxPv_Ctrl`;
		//print ("_______createTemplateLine" +"\n");
		parent $TemplateLine ($ID + ":Controls");
	}
	
	//ID:ShoulderL_IKFK_ctrl
	print($yosSJointName + "\n");
	print($EndJointMoveIK_Ctrl + "\n");
	addAttr -longName "IKFK" -proxy ($yosSJointName +"_IKFK_ctrl.tx") $EndJointMoveIK_Ctrl;
	addAttr -longName "IKFK" -proxy ($yosSJointName +"_IKFK_ctrl.tx") $EndJointRotIK_Ctrl;
	
	//FKコントロール
	print ("FK creation start"+ "\n") ;
	select -r $All_FK_JointName;
	string $FKctrlList[] = `yjp_rig_makeFK $RootJointShortName $All_FK_JointName 0 $IKmetaNode`;

	for ($n=0; $n<size($FKctrlList);$n++){
		sets -e -in $setName $FKctrlList[$n];
		addAttr -longName "IKFK" -proxy ($yosSJointName +"_IKFK_ctrl.tx") $FKctrlList[$n];
		/*
		if($n==1){
			string $asi = `RigFootCurveBox asi 7 2 6`;
			yjp_rig_ReplaceCurve $FKctrlList[$n] $asi;
		}
		else if ($n==2){
			string $IJDM = `shadingNode -asUtility multiplyDivide -n ($FKctrlList[$n-1] + "_DM")`;
			print($FKctrlList[$n]+"\n");print($IJDM + "\n");
			connectAttr -f ($FKctrlList[$n] + ".rotate") ($IJDM + ".input1");
			string $sdk[] = `listRelatives -p $FKctrlList[$n-1]`;
			connectAttr -f ($IJDM + ".output") ($sdk[0] + ".rotate");
			setAttr ($IJDM + ".input2") 1.0 1.0 1.0;
		}
		*/
	}
	
	if($LegType !=1){
		xform -ws -t $endpos[0] $endpos[1] $endpos[2] ($EndJointShortName + "_IK_0"); 
	}
	delete $banckLoc[0];
	
	print ("yjp_rig_IKFKSetUp END\n");
	return;
}
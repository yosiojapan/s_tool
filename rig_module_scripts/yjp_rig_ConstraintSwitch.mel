//IKコントローラでグランドとローカル階層に切り替えた時、モーションが崩れないようにする
//前後のフレームにキーが追加される
//元の位置や回転情報を維持する
//

global proc yjp_rig_doConstraintSwitch()
{
	string $NewTarget = `optionMenu -q -v yjp_ConstraintSwitch`;
	print($NewTarget+"\n");
	string $sel[] = `ls -sl`;
	if(!size($sel)) error (": can't find first input node '" + $sel[0] + "'\n");
	//現在のフレーム
	float $Frame[];
	
	$Frame[0] = `currentTime -q`;
	
	//タイムスライダーの最小最大
	int $TimeMin = `playbackOptions -q -min`;
	int $TimeMax = `playbackOptions -q -max`;
	//タイムスライダー選択範囲
	global string $gPlayBackSlider;
	float $rangeArra[] = `timeControl -q -rangeArray $gPlayBackSlider`;
	
	float $startTime = $rangeArra[0];
	float $endTime = $rangeArra[1]-1;
	print ($startTime + " "+$endTime+ "\n") ;
	float $allFrame[];
	for($n=0;$n<`size$sel`;$n++){
		if($startTime == $endTime){
			$Frame[0] = $startTime;
		}
		else{
			$allFrame = `keyframe -at t -at r -query -tc -query -tc $sel[$n]`;
			$allFrame = `yjp_floatArrayRemoveDuplicates $allFrame`;
			int $y;
			int $rv = 0;
			for($y=0;$y<`size$allFrame`;$y++){
				print ($allFrame[$y]+ "\n") ;
				if($startTime <= $allFrame[$y] && $allFrame[$y] <= $endTime){
					$Frame[$rv] = $allFrame[$y];
					$rv++;
				}
			}
		}
		//コンストレイントアトリビュート取得
		string $Atrlist[] = `listAttr -o -se -ud $sel[$n]`;
		int $follow ;
		$follow = stringArrayFind("followParent",0,$Atrlist);
		if($follow == -1){
			$follow = stringArrayFind("followRotate",0,$Atrlist);
		}
		if($follow == -1){
			$follow = stringArrayFind("followTranslate",0,$Atrlist);
		}
		string $ConstraintAttr = $Atrlist[$follow];
		int $i;
		for($i=0;$i<`size$Frame`;$i++){
			currentTime $Frame[$i];
			if( `getAttr -k ($sel[$n] + ".t")`||`getAttr -channelBox ($sel[$n] + ".t")` )setKeyframe -at t $sel[$n];
			if( `getAttr -k ($sel[$n] + ".r")`||`getAttr -channelBox ($sel[$n] + ".r")` )setKeyframe -at r $sel[$n];
			setKeyframe -at $ConstraintAttr $sel[$n];
		}
		//コンストレイントアトリビュートのenumを取得
		print ("enum "+ $ConstraintAttr+ "\n") ;
		string $ConstTarget[] = `attributeQuery -node $sel[$n] -listEnum $ConstraintAttr`;
		string $ConstTargetArray[];
		tokenize $ConstTarget[0] ":" $ConstTargetArray;
		
		int $targetint = size($ConstTargetArray);
		int $newIndex;
		if($newIndex > $targetint){
			$newIndex = $targetint-1;
		}
		
		$newIndex = stringArrayFind($NewTarget,0,$ConstTargetArray);
		print ("index "+$newIndex + "\n") ;
		if($newIndex == -1){
			$newIndex = $targetint-1;
			warning ($sel[$n] + " No Enum " + $NewTarget + "\n");
			continue;
		}
		
		string $locator[];
		//一時的に現在の位置回転情報をロケータに保存
		$locator = `spaceLocator -n "tempMcSwitchLocator"`;
		
		for($i=0;$i<`size$Frame`;$i++){
			print ("実行フレーム"+$Frame[$i]+ " "+ $startTime+ "\n") ;
			currentTime $Frame[$i];
			//現在のターゲット取得
			print ($ConstraintAttr+ "\n") ;
			
			int $CurrentTarget = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
			print ("CurrentTarget "+$CurrentTarget+ "\n") ;

			int $Targetcheck;
			//１フレ前にキーを打つ
			print ("TimeMin "+ $TimeMin + "\n") ;
			if($Frame[$i] == $startTime && $TimeMin < $Frame[$i]){
				//print ("１フレ前にキーを打つ"+ "\n") ;
				currentTime ($Frame[$i] - 1);
				if(!`getAttr -lock ($sel[$n] + ".t")`)setKeyframe -at "translate" $sel[$n];
				if(!`getAttr -lock ($sel[$n] + ".r")`)setKeyframe -at "rotate" $sel[$n];
				$Targetcheck = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
				if($Targetcheck == $CurrentTarget){
					setAttr ($sel[$n] + "." + $ConstraintAttr) $CurrentTarget;
					setKeyframe -at $ConstraintAttr $sel[$n];
				}
			}
			//１フレ後にキーを打つ
			if($Frame[$i] == $endTime && $Frame[$i] < $TimeMax){
				//print ("１フレ後にキーを打つ"+ "\n") ;
				currentTime ($Frame[$i] + 1);
				if(!`getAttr -lock ($sel[$n] + ".t")`)setKeyframe -at "translate" $sel[$n];
				if(!`getAttr -lock ($sel[$n] + ".r")`)setKeyframe -at "rotate" $sel[$n];
				$Targetcheck = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
				if($Targetcheck == $CurrentTarget){
					setAttr ($sel[$n] + "." + $ConstraintAttr) $CurrentTarget;
					setKeyframe -at $ConstraintAttr $sel[$n];
				}
			}
			currentTime $Frame[$i];
			matchTransform $locator[0] $sel[$n];
			
			//ターゲットを切り替える
			setAttr ($sel[$n] + "." + $ConstraintAttr) $newIndex;
			setKeyframe -at $ConstraintAttr $sel[$n];
					
			//ロケータ情報を移植
			//matchTransform -pos -rot $sel[$n] $locator[0];
			yjp_samePosition $locator[0] $sel[$n] 1 1 0;

		}
		clear $Frame;
		//ロケータを削除
		delete $locator[0];
	}
	select -r $sel;
	return;
}
global proc yjp_getConstSelectedNode()
{
	string $sel[] = `ls -sl`;
	if(!size($sel)) error (": can't find first input node '" + $sel[0] + "'\n");
	
	//コンストレイントアトリビュート取得
	string $Atrlist[] = `listAttr -o -se -ud $sel[0]`;
	int $follow ;
	$follow = stringArrayFind("followParent",0,$Atrlist);
	if($follow == -1){
		$follow = stringArrayFind("followRotate",0,$Atrlist);
	}
	if($follow == -1){
		$follow = stringArrayFind("followTranslate",0,$Atrlist);
	}
	string $ConstraintAttr = $Atrlist[$follow];

	string $ConstTarget[] = `attributeQuery -node $sel[0] -listEnum $ConstraintAttr`;
	string $ConstTargetArray[];
	tokenize $ConstTarget[0] ":" $ConstTargetArray;
	string $menuItems[] = `optionMenu -q -itemListLong "yjp_ConstraintSwitch"`;

	// 各menuItemを削除
	for ($item in $menuItems) {
		deleteUI $item;
	}
	for ($n=0; $n<(size($ConstTargetArray)); $n++){
		menuItem -label $ConstTargetArray[$n] -p "yjp_ConstraintSwitch";
	}
	
}
global proc yjp_rig_ConstraintSwitch()
{
	if (`window -exists "ConstraintSwitchWindow"`)
    deleteUI "ConstraintSwitchWindow";

	window -title "ConstraintSwitch" -widthHeight 300 100 "ConstraintSwitchWindow";

	columnLayout;
	rowColumnLayout -nc 1 -cs 1 5 -rs 1 5 -cw 1 285;
	
	button -w 285 -label "Get Selected Node" -command "yjp_getConstSelectedNode";
	
	optionMenu -label "Switch Parent" yjp_ConstraintSwitch;
	
	button -w 285 -label "ConstraintSwitch" -command "yjp_rig_doConstraintSwitch";
	
	showWindow "ConstraintSwitchWindow";
	window -e -widthHeight 300 80 "ConstraintSwitchWindow";
}

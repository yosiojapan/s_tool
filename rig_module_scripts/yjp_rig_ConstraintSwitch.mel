//IKコントローラでグランドとローカル階層に切り替えた時、モーションが崩れないようにする
//前後のフレームにキーが追加される
//元の位置や回転情報を維持する
//

global proc yjp_rig_ConstraintSwitch(int $NewTarget)
{
	string $sel[] = `ls -sl`;
	if(!size($sel)) error (": can't find first input node '" + $sel[0] + "'\n");
	
	//現在のフレーム
	float $Frame[];
	
	$Frame[0] = `currentTime -q`;
	
	//タイムスライダーの最小最大
	int $TimeMin = `playbackOptions -q -min`;
	int $TimeMax = `playbackOptions -q -max`;
	//タイムスライダー選択範囲
	global string $gPlayBackSlider;
	float $rangeArra[] = `timeControl -q -rangeArray $gPlayBackSlider`;
	
	float $startTime = $rangeArra[0];
	float $endTime = $rangeArra[1]-1;
	print ($startTime + " "+$endTime+ "\n") ;
	float $allFrame[];
	for($n=0;$n<`size$sel`;$n++)
	{
		if($startTime == $endTime)
		{
			$Frame[0] = $startTime;
		}
		else
		{
			$allFrame = `keyframe -at t -at r -query -tc -query -tc $sel[$n]`;
			$allFrame = `yjp_floatArrayRemoveDuplicates $allFrame`;
			int $y;
			int $rv = 0;
			for($y=0;$y<`size$allFrame`;$y++)
			{
				print ($allFrame[$y]+ "\n") ;
				if($startTime <= $allFrame[$y] && $allFrame[$y] <= $endTime)
				{
					$Frame[$rv] = $allFrame[$y];
					$rv++;
				}
			}
		}
		//コンストレイントアトリビュート取得
		string $Atrlist[] = `listAttr -o -se -ud $sel[$n]`;
		int $follow ;
		$follow = stringArrayFind("followParent",0,$Atrlist);
		if($follow == -1)
		{
			$follow = stringArrayFind("followRotate",0,$Atrlist);
		}
		if($follow == -1)
		{
			$follow = stringArrayFind("followTranslate",0,$Atrlist);
		}
		string $ConstraintAttr = $Atrlist[$follow];
		int $i;
		for($i=0;$i<`size$Frame`;$i++)
		{
			currentTime $Frame[$i];
			if( `getAttr -k ($sel[$n] + ".t")`||`getAttr -channelBox ($sel[$n] + ".t")` )setKeyframe -at t $sel[$n];
			if( `getAttr -k ($sel[$n] + ".r")`||`getAttr -channelBox ($sel[$n] + ".r")` )setKeyframe -at r $sel[$n];
			setKeyframe -at $ConstraintAttr $sel[$n];
		}
		//コンストレイントアトリビュートのenumを取得
		print ("enumを取得 "+ $ConstraintAttr+ "\n") ;
		string $ConstTarget[] = `attributeQuery -node $sel[$n] -listEnum $ConstraintAttr`;
		string $ConstTargetArray[];
		tokenize $ConstTarget[0] ":" $ConstTargetArray;
		
		//enumの個数取得
		int $targetint = size($ConstTargetArray);
		int $newIndex;
		
		$newIndex = $NewTarget;
		if($newIndex > $targetint)
		{
			$newIndex = $targetint-1;
		}
		
		//Groundのインデックスを探す
		//Rootのインデックスを探す
		//ローカルのインデックスを探す
		//ローカル２のインデックスを探す
		//センターのインデックスを探す
		
		string  $ary[];
		clear $ary;
		for($type=0;$type<`size$ConstTargetArray`;$type++)
		{
			if(`gmatch $ConstTargetArray[$type] "*Ground*"`)
			{
				$ary[0] =$ConstTargetArray[$type] ;
			}
			else if(`gmatch $ConstTargetArray[$type] "*Root*"`)
			{
				$ary[1] =$ConstTargetArray[$type] ;
			}
			else if(`gmatch $ConstTargetArray[$type] "*ROOT_T*"`)
			{
				$ary[1] =$ConstTargetArray[$type] ;
			}
			else if(`gmatch $ConstTargetArray[$type] "*wpG*"`)
			{
				$ary[0] =$ConstTargetArray[$type] ;
			}
			else
			{
				if(`gmatch $ConstTargetArray[$type] "*Center*"`)
				{
					
					$ary[3] =$ConstTargetArray[$type] ;
					
				}
				else if(`gmatch $ConstTargetArray[$type] "*Elbow*"`)
				{
					if($ary[2] == "")
					{
						$ary[2] =$ConstTargetArray[$type] ;
					}
					else
					{
						$ary[3] =$ConstTargetArray[$type] ;
					}
				}
				else if(`gmatch $ConstTargetArray[$type] "*Neck*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Spine2*"`)
				{
					if($ary[2] == "")
					{
						$ary[2] =$ConstTargetArray[$type] ;
					}
					else if($ary[3] == "")
					{
						$ary[3] =$ConstTargetArray[$type] ;
					}
					else
					{
						$ary[4] =$ConstTargetArray[$type] ;
					}
				}
				else if(`gmatch $ConstTargetArray[$type] "*Spine_T*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Pelvis*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Bag_ROOT*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Hand*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Spine1*"`)
				{
					$ary[3] =$ConstTargetArray[$type] ;
				}
				if(`gmatch $ConstTargetArray[$type] "*prop*"`)
				{
					$ary[4] =$ConstTargetArray[$type] ;
				}
				if(`gmatch $ConstTargetArray[$type] "*tuka*"`)
				{
					$ary[4] =$ConstTargetArray[$type] ;
				}
				if(`gmatch $ConstTargetArray[$type] "*ROOT*"`)
				{
					$ary[0] =$ConstTargetArray[$type] ;
				}
				if(`gmatch $ConstTargetArray[$type] "*Head_T*"`)
				{
					$ary[4] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Grip_R*"`)
				{
					$ary[2] =$ConstTargetArray[$type] ;
				}
				else if(`gmatch $ConstTargetArray[$type] "*Grip_L*"`)
				{
					if($ary[2] == "")
					{
						$ary[2] =$ConstTargetArray[$type] ;
					}
					else
					{
						$ary[3] =$ConstTargetArray[$type] ;
					}
				}
			}
			//print ($ary[$type]) ;
		}
		
		$newIndex = stringArrayFind($ary[$NewTarget],0,$ConstTargetArray);
		print ("index "+$newIndex + "\n") ;
		if($newIndex == -1)
		{
			$newIndex = $targetint-1;
		}
		
		//int $targetmax = $targetint-1;
		//print ("targetmax "+$targetmax+ "\n") ;
		
		string $locator[];
		//一時的に現在の位置回転情報をロケータに保存
		$locator = `spaceLocator -n "tempMcSwitchLocator"`;
		
		for($i=0;$i<`size$Frame`;$i++)
		{
			print ("実行フレーム"+$Frame[$i]+ " "+ $startTime+ "\n") ;
			currentTime $Frame[$i];
			//現在のターゲット取得
			print ($ConstraintAttr+ "\n") ;
			
			int $CurrentTarget = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
			print ("CurrentTarget "+$CurrentTarget+ "\n") ;
			/*
			if($CurrentTarget == $targetmax)
			{
				//初めのターゲットにする
				$NewTarget = 0;
			}
			else
			{
				//ターゲットを1づつずらす
				$NewTarget = $CurrentTarget + 1;
			}
			*/

			int $Targetcheck;
			//１フレ前にキーを打つ
			print ("TimeMin "+ $TimeMin + "\n") ;
			if($Frame[$i] == $startTime && $TimeMin < $Frame[$i])
			{
				//print ("１フレ前にキーを打つ"+ "\n") ;
				currentTime ($Frame[$i] - 1);
				if(!`getAttr -lock ($sel[$n] + ".t")`)setKeyframe -at "translate" $sel[$n];
				if(!`getAttr -lock ($sel[$n] + ".r")`)setKeyframe -at "rotate" $sel[$n];
				$Targetcheck = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
				if($Targetcheck == $CurrentTarget)
				{
					setAttr ($sel[$n] + "." + $ConstraintAttr) $CurrentTarget;
					setKeyframe -at $ConstraintAttr $sel[$n];
				}
			}
			//１フレ後にキーを打つ
			if($Frame[$i] == $endTime && $Frame[$i] < $TimeMax)
			{
				//print ("１フレ後にキーを打つ"+ "\n") ;
				currentTime ($Frame[$i] + 1);
				if(!`getAttr -lock ($sel[$n] + ".t")`)setKeyframe -at "translate" $sel[$n];
				if(!`getAttr -lock ($sel[$n] + ".r")`)setKeyframe -at "rotate" $sel[$n];
				$Targetcheck = `getAttr ($sel[$n] + "." + $ConstraintAttr)`;
				if($Targetcheck == $CurrentTarget)
				{
					setAttr ($sel[$n] + "." + $ConstraintAttr) $CurrentTarget;
					setKeyframe -at $ConstraintAttr $sel[$n];
				}
			}
			currentTime $Frame[$i];
			matchTransform $locator[0] $sel[$n];
			
			//ターゲットを切り替える
			setAttr ($sel[$n] + "." + $ConstraintAttr) $newIndex;
			setKeyframe -at $ConstraintAttr $sel[$n];
					
			//ロケータ情報を移植
			//matchTransform -pos -rot $sel[$n] $locator[0];
			yjp_samePosition $locator[0] $sel[$n] 1 1 0;

		}
		clear $Frame;
		//ロケータを削除
		delete $locator[0];
	}
	select -r $sel;
	return;
}
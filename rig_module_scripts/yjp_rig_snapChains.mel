global proc yjp_rig_snapChains(string $chainA[], string $chainB[], string $upNode, int $symmetry)
{
    int $numNodesA = size($chainA);
    int $numNodesB = size($chainB);
    if($numNodesA == $numNodesB){
        string $lastNodeA = $chainA[size($chainA) - 1];
        string $transformNodes[] = `listRelatives -c -type "transform" -ni $lastNodeA`;
        string $parentConstraints[] = `listRelatives -c -type "parentConstraint" -ni $lastNodeA`;
        $transformNodes = stringArrayRemove($parentConstraints, $transformNodes);
        $chainA[size($chainA)] = $transformNodes[0];
    }
    string $topNode = `createNode transform -n "tempNode"`;
    setAttr ($topNode+".tx") 20;
    parent -r $topNode $chainB[0];
    parent -w $topNode;
    float $reverse = 1;

    if($symmetry == 1)$reverse = -1;
    for ($i = 0; $i < $numNodesA; $i++){
        // ポジションのスナップ
        matchTransform -pos $chainB[$i] $chainA[$i];
        string $target;
        $target = $chainA[$i+1];
        if($i==0)$target = $topNode;
        // 向きの設定
        if ($i < size($chainA) - 1){
            print($upNode +" " + $chainA[$i+1] +" "+ $chainB[$i]);
            string $aimConstraint[] = `aimConstraint -aim $reverse 0 0 -u 0 $reverse 0 -wut "object" -wuo $upNode $target $chainB[$i]`;
            delete $aimConstraint;
        }
        else{
            matchTransform -rot $chainB[$i] $chainB[$i-1];
        }
    }
    delete $topNode;

}
//yjp_doImitateBind
global proc yjp_DetachBindShelf()
{
	string $sel[] = `ls -sl`;
	if( size($sel) == 0 ){
		print ("Select an object"+ "\n") ;
		return;
	}
	int $bpf = `optionVar -q "BindPoseFrame"`;
	string $newmeshArry[];
	int $dcheck = 0;
	if(`exists "DoraSkinWeightImpExp"`)$dcheck =1;
	if($dcheck){
		DoraSkinWeightImpExp ;
	}
	if(!`objExists tmpGroup` && $dcheck == 0){
		group -em -w -n "tmpGroup";
	}
	if( size($sel) == 1 ){
		////////スキンクラスター取得
		string $sc = `findRelatedSkinCluster $sel[0]`;
		if( size($sc) == 0 ){
			if($dcheck)deleteUI -window DoraSkinWeightImpExpWindow;
			confirmDialog -title "unbind cancel" -message ($sel[0] + "is not Bind");
			print ($sel[0] + "has no skincluster"+ "\n") ;
			return;
		}
		//Set current to 0 frames
		currentTime $bpf ;

		//Remove small weights
		select -r $sel[0];
		doPruneSkinClusterWeightsArgList 1 { "0.01" };
		removeUnusedInfluences;
		
		//Get joints that are bound
		string $jointlistname[] = `listConnections -type "joint" ($sc +".matrix")`;
		string $resStr = stringArrayToString($jointlistname, " ");
		
		int $maxInf = `getAttr ($sc + ".maxInfluences")`;
		
		if($dcheck == 0){
			$newmeshArry = `duplicate -n ($sel[0] + "_tmp") -rr $sel[0]`;
			yjp_doImitateBind $sel[0] $newmeshArry[0];
			setAttr ($newmeshArry[0] +".visibility") 0;
			parent $newmeshArry[0] "tmpGroup";
		}
		if($dcheck)
		{
			select -r $sel[0];
			DoraSkinWeightExport ("[File] " + $sel[0]);
			$newmeshArry = {"0"};
		}		
		//Shelf
		string $script = ("//" + $sel[0] + ";\nyjp_RebindShelf " + $sel[0] +" "+ $newmeshArry[0] +" "+ $maxInf + " \"" + $resStr + "\";\n");
		
		//unbind
		string $bakehistory = `confirmDialog -title "DetachOption" -message ("DetachOption")
		-button "BakeHistory"
		-button "DeleteHistory"
		-button "Rebind"
		-button "Cancel"
		-defaultButton "BakeHistory"
		-cancelButton "No" -dismissString "No"`;
		if($bakehistory == "BakeHistory"){
			doDetachSkin "2" { "3","1" }; 
		}
		else if($bakehistory == "DeleteHistory"){
			doDetachSkin "2" { "1","1" };
		}
		else if($bakehistory == "Rebind"){
			doDetachSkin "2" { "3","1" }; 
			eval ($script) ;
			return;
		}
		else if($bakehistory == "Cancel"){
			print ("Detach Cancel"+ "\n") ;
			if($dcheck)deleteUI -window DoraSkinWeightImpExpWindow;
			return;
		}
		
		textToShelf ($sel[0], $script);
		DeleteHistory;
	}
	else if( size($sel) > 1 ){
		//複数選択している場合選択パーツをデタッチして、再バインドシェルフに格納します。
		//If multiple selections are made, detach the selected parts and store them in the rebind shelf.

		string $node,$objs[],$partarry[],$sc,$jointlistname[],$resStr,$script;
		int $maxInf;
		int $t=0;
		int $n;
		
		for($node in $sel){
			print ( $node + "\n") ;
			$sc = `findRelatedSkinCluster $node`;
			if(`size($sc)`){
				$partarry[$t] = $node;
				$t++;
			}
		}
		$partarry = stringArrayRemoveDuplicates($partarry);
		
		currentTime $bpf ;
		
		for($n=0;$n<`size$partarry`;$n++){
			$sc = `findRelatedSkinCluster $partarry[$n]`;
			$jointlistname = `listConnections -type "joint" ($sc +".matrix")`;

			$resStr = stringArrayToString($jointlistname, " ");
			$maxInf = `getAttr ($sc + ".maxInfluences")`;
			
			if($dcheck == 0){
				$newmeshArry = `duplicate -n ($sel[0] + "_temp") -rr $partarry[$n]`;
				yjp_doImitateBind $partarry[0] $newmeshArry[0];
			}
			if($dcheck){
				select -r $partarry[$n];
				DoraSkinWeightExport ("[File] " + $partarry[$n]);
				$newmeshArry = {"0"};
			}
			$script = $script + ("\nyjp_RebindShelf " + $partarry[$n] +" "+ $newmeshArry[0] +" "+ $maxInf + " \"" + $resStr + "\";\n");
			print ($script + "\n") ;
			
			DetachSkin;
	    }
		string $scenename = `file -q -shortName -sceneName`;
		$scenename = `basenameEx $scenename`;
		
    	textToShelf ($scenename, $script);
	}
	if($dcheck){
		deleteUI -window DoraSkinWeightImpExpWindow;
	}
	confirmDialog -t "DetachBindShelf" -m "DetachBindShelf Completed";
	return ;
}